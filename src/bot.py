import config
import time
import telebot
from telebot import types
import pdb
from pymongo import MongoClient
from bson.objectid import ObjectId
import logging
from telebot.types import LabeledPrice
from telebot.types import ShippingOption
import datetime
import math
import pprint
silver_price = [LabeledPrice(label='Silver', amount=200000)]
gold_price = [LabeledPrice(label='Gold', amount=500000)]
platinum_price = [LabeledPrice(label='Platinum', amount=800000)]

silver = "Silver"
gold = "Gold"
platinum = "Platinum"
logger = telebot.logger
telebot.logger.setLevel(logging.DEBUG)
bot = telebot.TeleBot(config.token)
product_dict = {}
search_filter_dict = {}
search_menu = ['–í—Å–µ', '–ù–∞–∑–∞–¥']
client = MongoClient('mongodb://fuckingtelegramuser:fuckfuckfuck@ds059546.mlab.com:59546/fuckingtelegrambot')
date_buttons = ['1 –¥–µ–Ω—å', '3 –¥–Ω—è', '–ù–µ–¥–µ–ª—è', '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è','–ù–∞–∑–∞–¥']
coin_names = ['Bitcoin', 'Ethereum', 'Litecoin', 'NEO', 'NEM', 'Stratis', 'BitShares', 'Stellar', 'Ripple', 'Dash', 'Lisk', 'Waves', 'Ethereum Classic', 'Monero', 'ZCash']

cities = ['–ê–ª–º–∞—Ç—ã','–ê—Å—Ç–∞–Ω–∞','–®—ã–º–∫–µ–Ω—Ç','–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','–ê–∫—Ç–æ–±–µ','–¢–∞—Ä–∞–∑','–ü–∞–≤–ª–æ–¥–∞—Ä','–°–µ–º–µ–π','–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫','–£—Ä–∞–ª—å—Å–∫','–ö–æ—Å—Ç–∞–Ω–∞–π','–ö—ã–∑—ã–ª–æ—Ä–¥–∞','–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫','–ö—ã–∑—ã–ª–æ—Ä–¥–∞','–ê—Ç—ã—Ä–∞—É','–ê–∫—Ç–∞—É','–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω']

exchanges =['COINMARKETCAP', 'BLOCKCHAIN', 'CEX.IO', 'ALONIX', 'BITTREX', 'EXMO.ME', 'BITFINEX', 'POLONIEX']

main_buttons = ['–ë–∞–∑–∞—Ä', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é']
packages = ['Silver', 'Gold', 'Platinum', '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∞–∫–µ—Ç', '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º']
delete_buttons = ['–£–¥–∞–ª–∏—Ç—å', '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
bazaar_buttons = ['–ö—É–ø–∏—Ç—å', '–ü—Ä–æ–¥–∞—Ç—å', '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
settings_buttons = ['–ü–∞–∫–µ—Ç—ã']
class Product:
    def __init__(self, city):
        self.name = None
        self.exchange = None
        self.price = None
        self.percent = None
        self.city = city
        self.comment = None
        self.contact = None

class SearchFilter:
    def __init__(self, city):
        self.city = city
        self.currency = None
        self.price = None
        self.commission = None
        self.sort_type = None
        self.current_page = None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_msg = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{0}*. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?".format(message.chat.first_name)
    bot.send_message(message.chat.id, welcome_msg,reply_markup=create_keyboard(words=main_buttons,width=1),parse_mode='markdown')
    username = message.chat.username
    if traders.find({ 'username': username}).count()<1:
        traders.insert_one({
            'username': username,
            'is_paid':None,
            "created_at": datetime.datetime.utcnow()
        })

@bot.message_handler(content_types=['text'])
def handle_message(message):
    if message.text=='–ë–∞–∑–∞—Ä':
        bazaar(message)
    elif message.text=='–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings(message)
    elif message.text=='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é':
        command_terms(message)
    elif message.text == "Silver":
        silver_invoice(message)
    elif message.text == "Gold":
        gold_invoice(message)
    elif message.text == "Platinum":
        platinum_invoice(message)
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        cancel_subscription(message)
    elif message.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∞–∫–µ—Ç":
        determine_package(message)
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        handle_main_menu_btn(message)
    elif message.text =='–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º':
        settings(message)


def bazaar(message):
    msg = bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=create_keyboard(bazaar_buttons,1,False,False))
    bot.register_next_step_handler(msg, process_bazaar_step)

def process_bazaar_step(message):
    if message.text == '–ö—É–ø–∏—Ç—å':
        buy(message)
    elif message.text == '–ü—Ä–æ–¥–∞—Ç—å':
        sell_coin(message)
    elif message.text == '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        my_ads(message)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_main_menu_btn(message)


@bot.message_handler(commands=['buy'])
def buy(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö –±—É–¥—É—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ –º–æ–µ–π –±–∞–∑–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –Ω—É–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–µ—Ö–∞–ª–∏!\n'
    '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.', reply_markup=create_keyboard(["–í—Å–µ"]+cities+['–ù–∞–∑–∞–¥'],1,False,False))
    bot.register_next_step_handler(msg, choose_city_buy)

def choose_city_buy(message):
    try:
        chat_id = message.chat.id
        city = message.text
        if message.text == '–ù–∞–∑–∞–¥':
            bazaar(message)
        else:
            count = 0
            for i in cities+['–í—Å–µ']:
                if iequal(city, i):
                    count+=1
            if count==1:
                search_filter = SearchFilter(city)
                search_filter_dict[chat_id] = search_filter
                search_filter.city = city
                msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=create_keyboard(["–í—Å–µ"]+coin_names,1,False,False))
                bot.register_next_step_handler(msg, process_name_step_buy)
            else:
                msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞')
                bot.register_next_step_handler(msg, choose_city_buy)
                return
            
    except Exception as e:
        bot.reply_to(message, 'oooops')

def list_packages(message):
    bot.send_message(message.chat.id, '''<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∞–≤–æ –ø–æ–¥–∞—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –ª–∏–º–∏—Ç–∞ –≤ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω–µ–¥–µ–ª—é, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤.

<b>üí∏–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤:</b>
Silver - –¥–∞–µ—Ç –ø—Ä–∞–≤–æ —Ä–∞–∑–º–µ—â–∞—Ç—å 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π.–¶–µ–Ω–∞: 2000—Ç–≥.
Gold - –¥–∞–µ—Ç –ø—Ä–∞–≤–æ —Ä–∞–∑–º–µ—â–∞—Ç—å 30 –æ–±—ä—è–≤–ª–µ–Ω–∏–π.–¶–µ–Ω–∞: 5000—Ç–≥.
Platinum - –¥–∞–µ—Ç –ø—Ä–∞–≤–æ —Ä–∞–∑–º–µ—â–∞—Ç—å 50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π.–¶–µ–Ω–∞: 8000—Ç–≥.

<b>–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
–í —Å–ª—É—á–∞–µ,–µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–∞–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏, —Ç–æ –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.
–î–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º.

<b>–£–¥–∞—á–∏ –º–æ–π –¥—Ä—É–≥</b>üôå

P.S –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–∑—ã–≤—ã –æ –±–æ—Ç–µ,–Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–∫—É
@hancapital''', parse_mode="HTML")
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç", reply_markup=create_keyboard(words=packages,width=1))
    bot.register_next_step_handler(msg, process_package_step)

def process_package_step(message):
    if message.text == "Silver":
        silver_invoice(message)
    elif message.text == "Gold":
        gold_invoice(message)
    elif message.text == "Platinum":
        platinum_invoice(message)
    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        cancel_subscription(message)
    elif message.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∞–∫–µ—Ç":
        determine_package(message)
    elif message.text == "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º":
        settings(message)

def cancel_subscription(message):
    buttons = ['–ù–µ—Ç', '–î–∞']
    msg = bot.reply_to(message, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?', reply_markup=create_keyboard(words=buttons,width=1))
    bot.register_next_step_handler(msg, process_package_delete_confirmation_step)

def determine_package(message):
    a = traders.find_one({'username':message.chat.username})
    package_id = a['is_paid']
    if (package_id == False or package_id==None):
        msg = bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç")
    else:
        if package_id == 1:
            package_name = silver
        elif package_id == 2:
            package_name = gold
        elif package_id == 3:
            package_name = platinum
        msg = bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–∞–∫–µ—Ç {0}".format(package_name))
    bot.register_next_step_handler(msg, process_package_step)
def process_package_delete_confirmation_step(message):
    if message.text == "–î–∞":
        traders.update_one({'username':message.chat.username},{'$set':{'is_paid':False}})
        msg = bot.send_message(message.chat.id, "–Ø –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É")
        list_packages(message)
    elif message.text == "–ù–µ—Ç":
        list_packages(message)

def silver_invoice(message):
    bot.send_invoice(message.chat.id,
        title='–ü–∞–∫–µ—Ç Silver',
        description='''–•–æ—á–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã? Silver –ø–∞–∫–µ—Ç –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π''',
        provider_token=config.provider_token,
        currency='KZT',
        photo_url='http://livingalegacyinc.com/wp-content/uploads/2016/09/silver.png',
        photo_height=300,
        photo_width=300,
        photo_size=300,
        is_flexible=False,
        prices=silver_price,
        start_parameter='coinkz-silver',
        invoice_payload='Silver')

def gold_invoice(message):
    bot.send_invoice(message.chat.id,
        title='–ü–∞–∫–µ—Ç Gold',
        description='''–•–æ—á–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã? Gold –ø–∞–∫–µ—Ç –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 30 –æ–±—ä—è–≤–ª–µ–Ω–∏–π''',
        provider_token=config.provider_token,
        currency='KZT',
        photo_url='http://angeltd.com/wp-content/uploads/2016/06/gold-package.png',
        photo_height=300,  # !=0/None or picture won't be shown
        photo_width=280,
        photo_size=300,
        is_flexible=False,  # True If you need to set up Shipping Fee
        prices=gold_price,
        start_parameter='coinkz-gold',
        invoice_payload='Gold')

def platinum_invoice(message):
    bot.send_invoice(message.chat.id,
        title='–ü–∞–∫–µ—Ç Platinum',
        description='''–•–æ—á–µ—à—å –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã? Platinum –ø–∞–∫–µ—Ç –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ –¥–æ 50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π''',
        provider_token=config.provider_token,
        currency='KZT',
        photo_url='https://i2.wp.com/www.buildyoursocialgame.com/wp-content/uploads/2016/11/platinum-pkg.png',
        photo_height=300,  # !=0/None or picture won't be shown
        photo_width=280,
        photo_size=300,
        is_flexible=False,
        prices=platinum_price,
        start_parameter='coinkz-platinum',
        invoice_payload='Platinum')

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ú–æ—à–µ–Ω–Ω–∏–∫–∏ —Ö–æ—Ç–µ–ª–∏ —É–∫—Ä–∞—Å—Ç—å CVV –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–æ —è —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ,"
                                                " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –µ—â–µ —Ä–∞–∑. –ú–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö")
@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    msg = bot.send_message(message.chat.id,
                     '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {0} –ø–∞–∫–µ—Ç–∞! '
                     '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏.'.format(message.successful_payment.invoice_payload), parse_mode='Markdown')

    invoice_payload = message.successful_payment.invoice_payload

    if invoice_payload == "Silver":
        traders.update_one({'username':message.chat.username},{'$set':{'is_paid':1}})
    elif invoice_payload == "Gold":
        traders.update_one({'username':message.chat.username},{'$set':{'is_paid':2}})
    elif invoice_payload == "Platinum":
        traders.update_one({'username':message.chat.username},{'$set':{'is_paid':3}})

    bot.register_next_step_handler(msg, process_package_step)

def process_find_price(message):
    try:
        chat_id = message.chat.id
        price = message.text
        search_filter = search_filter_dict[chat_id]
        if price == '–ù–∞–∑–∞–¥':
            bazaar(message)
        else:
            if price=='–í—Å–µ':
               search_filter.price = {"$gte":0}
            else:
                p = price.split("-")
                if len(p)==1:
                    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞')
                    bot.register_next_step_handler(msg, process_find_price)
                    return
                elif(p[0].isdigit() and p[1].isdigit()):
                    n1 = int(p[0])
                    n2 = int(p[1])
                    if n1>n2:
                        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É')
                        bot.register_next_step_handler(msg, process_find_price)
                        return
                    else:
                        search_filter.price = {"$gte": n1, "$lte": n2}
                else:
                    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω')
                    bot.register_next_step_handler(msg, process_find_price)
                    return

            msg = bot.send_message(message.chat.id, '''–ö–∞–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏? –ù–∞–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 0 –¥–æ 100. –ï—Å–ª–∏ –¥–ª—è –≤–∞—Å —ç—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–í—Å–µ"''', reply_markup=create_keyboard(words=search_menu,width=1))
            bot.register_next_step_handler(msg, process_commission_filter_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_commission_filter_step(message):
    try:
        chat_id = message.chat.id
        commission = message.text
        search_filter = search_filter_dict[chat_id]
        if commission == '–ù–∞–∑–∞–¥':
            bazaar(message)
        else:
            if commission=='–í—Å–µ':
               search_filter.commission = {"$gte":0}
            else:
                if(commission.isdigit()):
                    com = int(commission)
                    search_filter.commission = {"$eq": com}
                else:
                    msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º')
                    bot.register_next_step_handler(msg, process_commission_filter_step)
                    return
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=create_keyboard(words=date_buttons, width=1))
            bot.register_next_step_handler(msg, process_sort_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_sort_step(message):
    try:
        chat_id = message.chat.id
        sort_type = message.text
        search_filter = search_filter_dict[chat_id]
        if sort_type == '–ù–∞–∑–∞–¥':
            bazaar(message)
        else:
            if sort_type == '1 –¥–µ–Ω—å':
                N = 1
            elif sort_type == '3 –¥–Ω—è':
                N = 3
            elif sort_type == '–ù–µ–¥–µ–ª—è':
                N = 7
            elif sort_type == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
                N = 50
            date_N_days_ago = datetime.datetime.now() - datetime.timedelta(days=N)
            search_filter.sort_type = ({'$gte':date_N_days_ago})
            filter_params = get_filter_params(chat_id)
            # bot.send_message(chat_id, str(filter_params))
            pages = get_pages_num(filter_params)
            a = skiplimit(5,1,filter_params, chat_id,pages)
            search_filter.current_page = 1
            keyboard = types.InlineKeyboardMarkup(row_width = 2)
            callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="forward")
            keyboard.add(callback_bt2)
            if pages != 1:            
                msg = bot.send_message(chat_id,a, reply_markup=keyboard, parse_mode='HTML')
            else:
                msg = bot.send_message(chat_id,a, parse_mode='HTML')                
            bot.register_next_step_handler(msg, process_sort_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            chat_id = call.message.chat.id
            search_filter = search_filter_dict[chat_id]
            if call.data == 'back' or call.data == 'forward':
                if call.data=='back':
                    search_filter.current_page-=1
                elif call.data == 'forward':
                    search_filter.current_page+=1
                filter_params = get_filter_params(chat_id)
                pages = get_pages_num(filter_params)                
                a = skiplimit(5,search_filter.current_page,filter_params,chat_id,pages)
                keyboard = types.InlineKeyboardMarkup(row_width = 2)
                callback_bt1= types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
                callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="forward")

                if search_filter.current_page == 1:
                    keyboard.add(callback_bt2)
                elif search_filter.current_page == pages:
                    keyboard.add(callback_bt1)
                else:
                    keyboard.add(callback_bt1, callback_bt2)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=a, reply_markup=keyboard,parse_mode="HTML")
            else:
                pages = get_pages_num({'username': call.message.chat.username})                
                if call.data =='-1':
                    search_filter.current_page-=1
                elif call.data == '1':
                    search_filter.current_page+=1
                a = skiplimit(5,search_filter.current_page,{'username': call.message.chat.username},chat_id,pages)
                keyboard = types.InlineKeyboardMarkup(row_width = 2)
                callback_bt1= types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="-1")
                callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="1")


                if search_filter.current_page == 1:
                    keyboard.add(callback_bt2)
                elif search_filter.current_page == pages:
                    keyboard.add(callback_bt1)
                else:
                    keyboard.add(callback_bt1, callback_bt2)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=a, reply_markup=keyboard,parse_mode="HTML")
    except Exception as e:
        bot.reply_to(call.message, 'oooops')

def get_filter_params(chat_id):
    search_filter = search_filter_dict[chat_id]
    filter_params = {}

    filter_params["price"]=search_filter.price
    filter_params["percent"]=search_filter.commission
    filter_params["created_at"] = search_filter.sort_type
    if search_filter.city != "–í—Å–µ":
        filter_params["city"]=search_filter.city
    if search_filter.currency != "–í—Å–µ":
        filter_params["name"]=search_filter.currency

    return filter_params

def get_pages_num(filter_params):
    ads_count = sell.find(filter_params).count()
    pages = math.ceil(ads_count/5.0)

    return pages

def skiplimit(page_size, page_num, filter_params, chat_id, total_pages):
    skips = page_size * (page_num - 1)
    cursor = sell.find(filter_params).skip(skips).limit(page_size)
   
    ads_count = sell.find(filter_params).count()
    b = page_size * page_num - page_size +1
    a = '–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Üo–≤: {0}\n\n'.format(ads_count)
    for i in cursor:
        if b==page_size * page_num +1:
            break
        else:
            a += '{0}. –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {1}\n'.format(b, i['name'])
            a += '–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: $'+'{}\n'.format(i['price'])
            a += '–ö–æ–º–∏—Å—Å–∏—è: {}%\n'.format(i['percent'])
            a += '–ë–∏—Ä–∂–∞: {}\n'.format(i['exchange'])
            a += '–ì–æ—Ä–æ–¥: {}\n'.format(i['city'])
            a += '–í–ª–∞–¥–µ–ª–µ—Ü: @{}\n'.format(i['username'])
            a += '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}\n'.format('+'+i['phone_number'] if i['phone_number'] else '')  
            a += '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{}</i>\n'.format(i['comment'])
            a += '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (UTC): {}\n\n'.format(i['created_at'].strftime("%d/%m/%Y"))
            b+=1
    return a

@bot.message_handler(commands=['sell'])
def sell_coin(message):
    current_username = message.chat.username
    t = traders.find_one({'username':current_username})

    if (current_username == None):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–µ–ª–µ–≥—Ä–∞–º (username). Username –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º.")
    else:
        if (sell.find({'username':current_username}).count()==3 and (t['is_paid']==None or t['is_paid']==False)):
            msg = bot.send_message(message.chat.id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π (3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è). –ö—É–ø–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤ —á—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            list_packages(message)
        elif (sell.find({'username':current_username}).count()==10 and t['is_paid']==1):
            msg = bot.send_message(message.chat.id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π (10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π). –ö—É–ø–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤ —á—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            list_packages(message)
        elif (sell.find({'username':current_username}).count()==30 and t['is_paid']==2):
            msg = bot.send_message(message.chat.id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π (10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π). –ö—É–ø–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤ —á—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            list_packages(message)
        elif (sell.find({'username':current_username}).count()==50 and t['is_paid']==3):
            msg = bot.send_message(message.chat.id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π (50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
        else:
            ct = cities+["–ù–∞–∑–∞–¥"]
            msg = bot.reply_to(message, '–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–∞—Å–∞—é—â–∏–µ—Å—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–∏—Ö –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —è –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–π—Ç–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ –æ–Ω–æ –∏–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —Ç–æ –≤–∞–º –ø–æ–∑–≤–æ–Ω—è—Ç, –ª–∏–±–æ –Ω–∞–ø–∏—à—É—Ç. –ò —Ç–∞–∫, –ø–æ–µ—Ö–∞–ª–∏.\n''–°–ø–µ—Ä–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=create_keyboard(ct,3,True,False))
            bot.register_next_step_handler(msg, process_city_step)

def my_ads(message):
    try:
        chat_id = message.chat.id
        username = message.chat.username
        a = "–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
        b = 1
        if sell.find({'username':username}).count()==0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
        else:
            search_filter = SearchFilter('')
            search_filter_dict[chat_id] = search_filter            
            search_filter.current_page = 1
            pages = get_pages_num({'username':username})
            a = skiplimit(5,1,{'username':username}, chat_id,pages)
            keyboard = types.InlineKeyboardMarkup(row_width = 2)
            callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="1")
            keyboard.add(callback_bt2)
            msg = bot.send_message(chat_id, '–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', reply_markup=create_keyboard(delete_buttons,1,False,False))
            msg1 = bot.send_message(chat_id, a, parse_mode='HTML', reply_markup=keyboard)
            bot.register_next_step_handler(msg1, process_my_ads_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_my_ads_step(message):
    if message.text == '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è':
        my_ads(message)
    elif message.text == '–£–¥–∞–ª–∏—Ç—å':
        remove(message)
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_main_menu_btn(message)
def remove(message):
    try:
        username = message.chat.username
        chat_id = message.chat.id
        ads_number = sell.find({'username':username}).count()
        if ads_number==0:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", reply_markup=create_keyboard(delete_buttons,1,False,False))
        else:
            numbers = range(1,ads_number+1)
            str_numbers = [str(i) for i in numbers]
            str_numbers.append('–ù–∞–∑–∞–¥')

            msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –ø–æ —Å—á–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=create_keyboard(str_numbers,1,False,False))
            a = "–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
            b = 1
            if sell.find({'username':username}).count()==0:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
            else:
                pages = get_pages_num({'username':username})
                a = skiplimit(5,1,{'username':username}, chat_id,pages)

                keyboard = types.InlineKeyboardMarkup(row_width = 2)
                callback_bt1= types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="-1")
                callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="1")
                search_filter = search_filter_dict[chat_id]
                if search_filter.current_page == 1:
                    keyboard.add(callback_bt2)
                elif search_filter.current_page == pages:
                    keyboard.add(callback_bt1)
                else:
                    keyboard.add(callback_bt1, callback_bt2)

                msg = bot.send_message(message.chat.id, a, reply_markup=keyboard, parse_mode="HTML")
                bot.register_next_step_handler(msg, process_remove_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_remove_step(message):
    # try:
        if message.text == '–ù–∞–∑–∞–¥':
            my_ads(message)
        else:
            username = message.chat.username
            chat_id = message.chat.id
            ads_number = sell.find({'username':username}).count()
            if ads_number==0:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", reply_markup=create_keyboard(delete_buttons,1,False,False))
            else:
                seq_num = int(message.text)
                seq_num-=1
                target = ObjectId()
                docs = sell.find({'username':username})
                docs_count = docs.count()

                for i in range(docs_count):
                    if i==seq_num:
                        target = docs[i]['_id']
                    print(str(i)+'fds'+str(seq_num))

                sell.delete_one({'_id': target})
                msg =bot.send_message(chat_id, "Ok, —è —É–¥–∞–ª–∏–ª {0} –æ–±—ä—è–≤–ª–µ–Ω–∏–µ".format(seq_num+1))

                numbers = range(1,ads_number)
                str_numbers = [str(i) for i in numbers]
                str_numbers.append('–ù–∞–∑–∞–¥')

                msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –ø–æ —Å—á–µ—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=create_keyboard(str_numbers,1,False,False))

                pages = get_pages_num({'username':username})
                a = skiplimit(5,1,{'username':username}, chat_id,pages)

                keyboard = types.InlineKeyboardMarkup(row_width = 2)
                callback_bt1= types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="-1")
                callback_bt2 = types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data="1")
                search_filter = search_filter_dict[chat_id]
                if search_filter.current_page == 1:
                    keyboard.add(callback_bt2)
                elif search_filter.current_page == pages:
                    keyboard.add(callback_bt1)
                else:
                    keyboard.add(callback_bt1, callback_bt2)

                msg = bot.send_message(message.chat.id, a, reply_markup=keyboard, parse_mode="HTML")
                bot.register_next_step_handler(msg, process_remove_step)
    # except Exception as e:
    #     bot.reply_to(message, 'oooops')

def process_city_step(message):
    # try:
        chat_id = message.chat.id
        city = message.text.capitalize()
        if message.text == '–ù–∞–∑–∞–¥':
            bazaar(message)
        else:
            count = 0
            for i in cities:
                if iequal(city, i):
                    count+=1

            if count == 1:
                product = Product(city)

                product_dict[chat_id] = product

                product.city = city
                markup = types.ReplyKeyboardMarkup(row_width=2)
                itembtn1 = types.KeyboardButton('–ù–µ—Ç')
                itembtn2 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',request_contact=True)
                markup.add(itembtn1, itembtn2)
                msg = bot.reply_to(message, '–•–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∞—à username –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ', reply_markup=markup)
                bot.register_next_step_handler(msg, process_phone_step)
            else:
                msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞')
                bot.register_next_step_handler(msg, process_city_step)
                return
            
    # except Exception as e:
    #     bot.reply_to(message, 'oooops')

def process_phone_step(message):
    chat_id = message.chat.id
    product = product_dict[chat_id]
    if message.contact:
        product.contact = message.contact.phone_number
    else:
        product.contact = ''

    msg = bot.reply_to(message, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.', reply_markup=create_keyboard(coin_names,1,True,False))
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step_buy(message):
    # try:
        chat_id = message.chat.id
        currency = message.text
        if currency=="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=create_keyboard(main_buttons,1,False,False))
        else:
            count = 0            
            for i in ['–í—Å–µ']+coin_names:
                if iequal(currency, i):
                    count+=1
            
            if count == 1:
                search_filter = search_filter_dict[chat_id]
                search_filter.currency = currency

                msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏—Ä–µ, –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–æ–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: 2000-5000. –ß—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—Å–µ'",reply_markup=create_keyboard(words=search_menu,width=1))

                bot.register_next_step_handler(msg, process_find_price)
            else:
                msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞')
                bot.register_next_step_handler(msg, process_name_step_buy)
                return
       
    # except Exception as e:
    #     bot.reply_to(message, 'oooops')

def process_name_step(message):
    try:
        chat_id = message.chat.id
        name = message.text.title()
        if name=="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=create_keyboard(main_buttons,1,False,False))
        else:
            count = 0
            for i in coin_names:
                if iequal(name, i):
                    count+=1
        
            if count == 1:
                product = product_dict[chat_id]
                product.name = name

                msg = bot.reply_to(message, '–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?')
                bot.register_next_step_handler(msg, process_price_step)
            else:
                msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞')
                bot.register_next_step_handler(msg, process_name_step)
                return

    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_price_step(message):
    try:
        chat_id = message.chat.id
        price = message.text
        if not price.isdigit():
            msg = bot.reply_to(message, '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            bot.register_next_step_handler(msg, process_price_step)
            return
        product = product_dict[chat_id]
        product.price = price
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        msg = bot.reply_to(message, '–ö–∞–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –≤—ã –±–µ—Ä–µ—Ç–µ? –û—Ç 0 –¥–æ 20')
        bot.register_next_step_handler(msg, process_percent_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_percent_step(message):
    try:
        chat_id = message.chat.id
        percent = message.text
        rng = range(0,21)
        if not percent.isdigit():
            msg = bot.reply_to(message, '–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
            bot.register_next_step_handler(msg, process_percent_step)
            return
        if int(percent) not in rng:
            msg = bot.reply_to(message, '–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 20')
            bot.register_next_step_handler(msg, process_percent_step)
            return
        product = product_dict[chat_id]
        product.percent = percent
        msg = bot.reply_to(message, '–ü–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É?', reply_markup = create_keyboard(exchanges,2,False,False))
        bot.register_next_step_handler(msg, process_exchange_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')

def process_exchange_step(message):
    try:
        chat_id = message.chat.id
        exchange = message.text.upper()
        product = product_dict[chat_id]
        if not (exchange in exchanges):
            msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –∏–∑ —Å–ø–∏—Å–∫–∞')
            bot.register_next_step_handler(msg, process_exchange_step)
            return
        product.exchange = exchange
        msg = bot.reply_to(message, '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º', reply_markup=create_keyboard(['–ù–µ—Ç'],1,False,False))
        bot.register_next_step_handler(msg, process_comment_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')


def process_comment_step(message):
    try:
        chat_id = message.chat.id
        comment = message.text
        product = product_dict[chat_id]
        username = message.chat.username
        if comment=='–ù–µ—Ç':
             product.comment=''
        else:
            product.comment = comment
        buttons = ['–ù–µ—Ç', '–î–∞']
        a = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ\n\n–í–∞–ª—é—Ç–∞: ' + product.name + '\n–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ' + '$'+str(product.price) + '\n–ü—Ä–æ—Ü–µ–Ω—Ç: ' + product.percent+'%' + '\n–ö—É—Ä—Å: '+ product.exchange +'\n–ì–æ—Ä–æ–¥: ' + product.city+'\nUsername: @'+username+'\n–¢–µ–ª–µ—Ñ–æ–Ω: '+product.contact+'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>'+product.comment+'</i>'
        msg = bot.send_message(chat_id, a, reply_markup=create_keyboard(buttons,2,False,False),parse_mode='HTML')
        bot.register_next_step_handler(msg, process_confirmation_step)
    except Exception as e:
        bot.reply_to(message, 'oooops')
def process_confirmation_step(message):
    try:
        chat_id = message.chat.id
        confirm_answer = message.text
        product = product_dict[chat_id]
        username = message.chat.username
        if confirm_answer == '–î–∞':
            sell.insert_one({
                'name': product.name,
                'price': int(product.price),
                'percent': int(product.percent),
                'exchange': product.exchange,
                'city': product.city,
                'username': username,
                'comment': product.comment,
                'phone_number': product.contact,
                "created_at": datetime.datetime.utcnow()
            })
            a = '–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏!\n\n–í–∞–ª—é—Ç–∞: ' + product.name + '\n–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ' + '$'+str(product.price) + '\n–ü—Ä–æ—Ü–µ–Ω—Ç: ' + product.percent+'%' + '\n–ö—É—Ä—Å: '+ product.exchange +'\n–ì–æ—Ä–æ–¥: ' + product.city+'\nUsername: @'+username+'\n–¢–µ–ª–µ—Ñ–æ–Ω: '+product.contact+'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>'+product.comment+'</i>'
            bot.send_message(chat_id, a, reply_markup = create_keyboard(main_buttons,1,False,False), parse_mode='HTML')
        else:
            bot.send_message(chat_id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ', reply_markup=create_keyboard(main_buttons,1,False,False))
    except Exception as e:
        bot.reply_to(message, 'oooops')

def create_keyboard(words=None, width=None, isOneTime=False, isPhone=False):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=isOneTime, row_width=width, resize_keyboard = True)
    for word in words:
        keyboard.add(types.KeyboardButton(text=word, request_contact=isPhone))
    return keyboard

@bot.message_handler(commands=['help'])
def send_welcome(message):
	bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")

@bot.message_handler(commands=['terms'])
def command_terms(message):
    bot.send_message(message.chat.id,
        '''ü§î<b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?</b>
–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–≤—è–∑–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.

üí°<b>–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –æ–Ω —Ä–µ—à–∞–µ—Ç?</b>
–í –Ω–∞—à–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—ã–≥–ª—è–¥–∏—Ç —Ä—É—Ç–∏–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π (–ü–∏—Å–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö, –∏—Å–∫–∞—Ç—å –≤ —Å–æ—Ç–Ω—è—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –°–≤–µ—Ä—è—Ç—å —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ, —Å –Ω—É–∂–Ω–æ–π —Å—É–º–º–æ–π –∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π. 

‚úÖ<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –±–æ—Ç?</b>
–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –ò –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ–∏–ª—å—Ç—Ä–æ–≤.
 
üéØ<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: @coinbot_kz
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–∞–∑–∞—Ä"
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç "–ö—É–ø–∏—Ç—å" –∏–ª–∏ "–ü—Ä–æ–¥–∞—Ç—å"
4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å–∏—Ç –±–æ—Ç

<b>–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>
1. –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ
2. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ
3. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
 
<b>–£–¥–∞—á–∏ –º–æ–π –¥—Ä—É–≥</b>üôå

P.S. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–∑—ã–≤—ã –æ –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–∫—É @hancapital''', parse_mode="HTML")

@bot.message_handler(commands=['settings'])
def settings(message):
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=create_keyboard(settings_buttons+['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],1,False,False))
    bot.register_next_step_handler(msg, process_settings_step)

def process_settings_step(message):
    if message.text == '–ü–∞–∫–µ—Ç—ã':
        list_packages(message)
    elif message.text=='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        handle_main_menu_btn(message)


@bot.message_handler(regexp="/–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/")
def handle_main_menu_btn(message):
	bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=create_keyboard(words=main_buttons,width=1))

def iequal(a, b):
    try:
        return a.upper() == b.upper()
    except AttributeError:
        return a == b
if __name__ == '__main__':
    db = client.fuckingtelegrambot
    sell = db.sell
    traders = db.traders
    bot.polling(none_stop=True)
